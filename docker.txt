
***** 설치

https://docs.docker.com/reference/


<< ubuntu 14.0.4, 16.04, 18.04 >> 
#sudo apt-get update
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#sudo apt-get update
#apt-cache policy docker-ce

<< centos 7 >>
#yum install -y yum-utils
#yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
#yum install -y docker-ce
#systemctl start docker

<<  설치 확인 >>
docker -v
docker info 

리눅스 서버에서 docker 명령을 사용할 때 docker 데몬이 root 권한으로 실행되기 때문에 항상 sudo를 붙힌 후 docker 명령을 실행해야 하는 불편함이 있다.
이 같은 불편함을 덜려면 로그인 계정을 docker 그룹에 추가해 주면 된다.

sudo usermod -aG docker $USER
위 명령을 실행한 후 로그아웃한 후 다시 로그인하면 sudo 없이도 docker 명령을 실행할 수 있다.


***** run 명령어 옵션 
-i : 상호입출력  
-t : tty 활성화 
-d : dettached 모드로 컨테이너를 실행. detached 모드는 컨테이너를 백그라운드로 동작하는 애플리케이션으로서 실행 


***** 도커 명령어

이미지 검색
docker search  or https://hub.docker.com/

받은 이미지 확인
docker images

컨테이너 목록(정지되지 않은 컨테이너 목록)
docker ps

컨테이너 목록(정지된 컨테이너 포함한 모든 목록 )
docker ps -a

컨테이너 삭제
docker rm mycentos

포트 바인딩
-p[호스트의 포트]:[컨테이너의 포트]
docker run -it --name mywebserver -p 7777:80 ubuntu:14.04


-d 옵션으로 생성한 컨테이너에 접근하기 
docker exec -i -t [컨테이너이름] /bin/bash

로그 보기(-t:타임스탬프 -f:실시간 출력)
docker logs -t -f [컨테이너이름]

메모리  설정 m:(megabyte) g(gigabtyte)
swap 메모리 설정(default 메모리의 2배)
docker run -d --memory=500m --memory-swap=500m   --name memory1G nginx

메모리 확인
docker inspect memory1G |grep "Memory"


***** 컨테이너 생성 1
컨테이너 생성 및 실행과 동시에 컨테이너 내부로 진입 
docker run -i -t ubuntu:14.04           

exit 또는 CTRL+D 입력으로 컨테이너에 빠져나옴과 동시에 컨테이너 정지 
CTRL+P, Q 입력은 컨테이너에만 빠져나옴 



***** 컨테이너 생성 2 << step by step >>
이미지 받기
docker pull cnetos:7

컨테이너 생성하기(create 명령어는 컨테이너를 생성만 할 뿐 컨테이너로 들어가지는 않는다.)
docker create -i -t --name mycentos centos:7

컨테이너 시작
docker start mycentos

컨테이너 정지
docker stop mycentos

컨테이너 내부로 진입
docker attach mycentos

***** 웹서버 컨테이너 생성 

포트 바인딩
docker run -i -t --name mywebserver -p 7777:80 ubuntu:14.04

-p[호스트의 포트]:[컨테이너의 포트]

    ** ubuntu 일 때 apache 설치
    apt-get update
    apt-get install apache2 -y
    service apache2 start

    [호스트 IP]:7777 으로 접근하면 설치된 아파치 서버로 연결됨 

***** mysql 생성 
docker run -d --name mysqldb5.7 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=testdb -p 13306:3306 mysql:5.7

***** 호스트 볼륨 공유
mysql 설정, db파일등을 호스트 컴퓨터의 /home/audien/mysqlsetting 경로에 저장된다.
이후에 해당 컨테이너를 실수로 삭제하더라도 DB관련 설정정보 및 데이터는 호스트 컴퓨터에 보관된다.
-v 옵션:
-v /home/audien/mysqlsetting:/var/lib/mysql => 호스트의 /home/audien/mysqlsetting 디렉토리와 컨테이너의 /var/lib/mysql 디렉토리를 공유함.
docker run -d --name mysqlddb5.7 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=testdb -v /home/audien/mysqlsetting:/var/lib/mysql -p 13306:3306 mysql:5.7


***** 도커  볼륨
볼륨생성 : docker volume create --name myvolume
볼륨확인 : docker volume ls
볼륨연결 : docker run -i -t --name mycontainer -v myvolume:/root/ ubuntu:14.04
            -v [볼륨의 이름]:[컨테이너의 공유 디렉토리]

    볼륨정보 확인
    docker inspect --type volume myvolume


사용되지 않는 볼륨삭제     
    docker volume prune

-v 옵션 대신 --mount 옵션을 사용할 경우
myvolume이라는 이름의 도커 볼륨을 컨테이너의 내부의 /root에 공유할 경우 아래와 같다.
docker run -i -t --name mount_option1 --mount type=volume, source=myvolume, target=/root  ubuntu:14.04


호스트 디렉터리를 컨테이너 내부에 마운트하는 경우 source의 값은 호스트의 디렉터리 경로를 지정한다. 아래와 같다.
docker run -i -t --name mount_option2 --mount type=bind, source=/home/work, target=/home/testdir ubuntu:14.04
